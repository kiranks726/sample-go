name: Deployment

# This enables to manually trigger the workflow on the Github action UI
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment
        options:
          - dev
          - qa
          - prod
        required: true

jobs:
  # invoke-build:
  #   uses: ./.github/workflows/ci.yml

  deploy:
    # The caller workflow cannot use GitHub-hosted runners from the called repository
    # needs: invoke-build

    runs-on: ubuntu-latest

    #environment: ${{ github.event.inputs.environment }}

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: write

    env:
      NODE_VERSION: 16.14.0
      #GO_VERSION: 1.17

    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v3

      # - name: Create deploy version information file
      #   run: |
      #     import json, os
      #     from datetime import datetime

      #     workspace_path = os.getenv("GITHUB_WORKSPACE")
      #     with open(f"{workspace_path}/package.json", "r") as f:
      #       data = json.load(f)
      #       version = data["version"]
            
      #     env_file = os.getenv("GITHUB_ENV")
      #     with open(env_file, "a") as f:
      #       f.write(f"VERSION={version}")
            
      #     pipeline_details = {
      #       "name" : os.getenv("GITHUB_WORKFLOW"),
      #       "date" : datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"),
      #       "version" : version,
      #       "runId" : os.getenv("GITHUB_RUN_ID"),                
      #       "branch" : os.getenv("GITHUB_REF_NAME")
      #     }
            
      #     json_object = json.dumps(pipeline_details, indent = 4)
              
      #     # Writing to build_info.json
            
      #     with open(f"{workspace_path}/backend/mainmodule/build_info.json", "w") as outfile:
      #         outfile.write(json_object)

      #   shell: python

      - name: Setup Nodejs ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install cdk and its dependencies
        run: |
          npm install -g aws-cdk

      # - name: Setup Go ${{ env.GO_VERSION }}
      #   uses: actions/setup-go@v3
      #   with:
      #     go-version: ${{ env.GO_VERSION }}

      # - name: Install dependencies
      #   run: make install

      - name: Configure aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          role-to-assume: arn:aws:iam::593186514662:role/github-actions-role
          role-session-name: GithubCDActions
          aws-region: us-east-1
      
      # - name: Before downloaded artfacts
      #   run: |
      #     echo "List contents before downloading artifacts"
      #     ls
  
      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        with: 
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: ci.yml
          name: sample-go
          path: ${{ github.workspace }}/cdk.out

      # - name: After downloaded artfacts
      #   run: |
      #     echo "List contents after downloading artifacts"
      #     ls

      # - name: Go into build directory and list
      #   run: |
      #     echo "Change directory to build"
      #     cd .build
      #     echo "List contens inside .build"
      #     ls

      # TODO: stage can be parameterized based on the env selected on the Github action UI and parsed to the make command
      - name: Deploy stack
        run: cdk deploy
      
      # - name: Create git tag
      #   run: |
      #       git tag "$VERSION"
      #       git push origin "$VERSION"
      #       echo "git tag '$VERSION' created"

      # - name: Add action summary
      #   env:
      #     REPO: ${{ github.event.repository.name }}
      #     REPO_URL: ${{ github.event.repository.html_url }}
      #   run: |
      #     branchUrl=${REPO_URL}/tree/${GITHUB_REF_NAME}
      #     echo "## Sources" >> $GITHUB_STEP_SUMMARY
      #     echo "|Repository|Branch|" >> $GITHUB_STEP_SUMMARY 
      #     echo "|---|---|" >> $GITHUB_STEP_SUMMARY 
      #     echo "|<a href='${REPO_URL}'>${REPO}</a>|"\
      #           "<a href='${branchUrl}'>${GITHUB_REF_NAME}</a>|" >> $GITHUB_STEP_SUMMARY
